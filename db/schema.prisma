// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows", "rhel-openssl-1.0.x"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String
  items       Item[]
}

enum ItemStatus {
  integrating
  enable
  disable
}

model Item {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String            @unique
  description      String
  category         Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       Int
  files            ItemFile[]
  fileIntegrations FileIntegration[]
  status           ItemStatus        @default(disable)
  dificulty        Int?
  assemblyTime     Decimal?
  author           String?
  authorLink       String?
  licenseType      String?
  licenseTypeLink  String?
}

enum FileType {
  instruction
  preview
  scheme
}

model ItemFile {
  id           Int      @id @default(autoincrement())
  storagePath  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  artifactType FileType
  item         Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       Int
}

enum ItemIntegrationStatus {
  pending
  pendingFiles
  running
  done
  error
  simulation
}

model IntegrationSetup {
  id                    Int               @id @default(autoincrement())
  name                  String
  domain                String
  itemUrlSelector       String
  categorySelector      String
  categoryBinding       String
  descriptionSelector   String?
  previewImagesSelector String
  schemesSelector       String
  ignoreExpressions     String?
  integrationItems      ItemIntegration[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ItemIntegration {
  id               Int                   @id @default(autoincrement())
  name             String
  url              String                @unique
  status           ItemIntegrationStatus
  fileIntegrations FileIntegration[]
  log              IntegrationLog[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  setup            IntegrationSetup      @relation(fields: [setupId], references: [id])
  setupId          Int
  categoryId       Int
  error            String?
}

enum FileIntegrationStatus {
  pending
  running
  done
  error
  simulation
}

model FileIntegration {
  id                Int                   @id @default(autoincrement())
  itemId            Int
  item              Item                  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemIntegrationId Int
  itemIntegration   ItemIntegration       @relation(fields: [itemIntegrationId], references: [id], onDelete: Cascade)
  selector          String
  url               String                @unique
  status            FileIntegrationStatus
  integrationType   FileType
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  error             String?
}

model IntegrationLog {
  id            Int             @id @default(autoincrement())
  integration   ItemIntegration @relation(fields: [integrationId], references: [id])
  integrationId Int
  reference     String
  value         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  error         String?
}
